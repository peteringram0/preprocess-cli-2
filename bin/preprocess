#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var optimist = require('optimist');
var pp = require('preprocess');

var argv = optimist
  .usage('Usage: $0 <file> [options]')

  .alias('o', 'output-file')
  .string('o')
  .describe('o', 'Output file')

  .alias('s', 'file-not-found-silent-fail')
  .boolean('s')
  .describe('s', "Instruct preprocess to fail silently.")
  .default('s', false)

  .string('src-dir')
  .describe('src-dir', 'The directory where to look for files included. Defaults to process.cwd().')

  .string('src-eol')
  .describe('src-eol', "The end of line (EOL) character to use for the preprocessed result.")

  .alias('t', 'type')
  .string('t')
  .describe('t', 'The syntax type of source string to preprocess.')
  .default('t', 'html')

  .alias('d', 'context')
  .string('d')
  .describe('d', 'Context Object')

  .alias('e', 'env')
  .string('e')
  .describe('e', 'Enviroment file')

  .argv;

if (argv._.length === 0 || argv.help) {
  console.log(optimist.help());
  process.exit();
}

// paths
var sourcePath = path.resolve(argv._[0]);

var outPath;
if (argv.o) {
  outPath = path.resolve(argv.o);
}

var context;
if (argv.d) {
  context = JSON.parse(argv.d);
}

var env;
if (argv.e) {
  env = path.resolve(argv.e);
  env = require(env);
}

// Merge the context with the enviroment
var merged = Object.assign(context, env);

// options
var options = {
  fileNotFoundSilentFail: argv.s,
  srcDir: path.resolve(argv['src-dir'] || process.cwd()),
  type: argv.t
};

if (argv['src-eol']) {
  options.srcEol = argv['src-eol'];
}

// run
if (outPath) {
  pp.preprocessFileSync(sourcePath, outPath, merged, options);
} else {
  var source = fs.readFileSync(sourcePath);
  console.log(pp.preprocess(source, merged, options));
}
